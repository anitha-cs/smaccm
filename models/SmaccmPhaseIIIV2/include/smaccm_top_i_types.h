#ifndef __SMACCM_top_i_Instance_types__H
#define __SMACCM_top_i_Instance_types__H

/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/john/workspace/smaccm/models/SmaccmPhaseIII/include/smaccm_top_i_types.h
   Created on: 2015/12/03 13:59:23
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the datatypes used for communications between 
  AADL components as defined in the system implementation top_i_Instance.

 **************************************************************************/

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
// Headers for externally declared types.

#include "sequence_numbered_tristate_types.h" 

#include "sequence_numbered_stab_config_types.h" 

#include "sequence_numbered_quadcopter_motors_types.h" 

#include "sequence_numbered_throttle_ui_types.h" 

#include "sequence_numbered_accelerometer_sample_types.h" 

#include "sequence_numbered_att_control_debug_types.h" 

#include "sequence_numbered_sensors_result_types.h" 

#include "sequence_numbered_float_types.h" 

#include "sequence_numbered_reboot_types.h" 

#include "sequence_numbered_magnetometer_sample_types.h" 

#include "sequence_numbered_pid_config_types.h" 

#include "sequence_numbered_rc_input_types.h" 

#include "sequence_numbered_alt_control_debug_types.h" 

#include "sequence_numbered_user_input_types.h" 

#include "sequence_numbered_rgb_led_setting_types.h" 

#include "sequence_numbered_position_sample_types.h" 

#include "heartbeat_types.h" 

#include "sequence_numbered_xyz_calibration_types.h" 

#include "sequence_numbered_control_setpoint_types.h" 

#include "sequence_numbered_control_law_types.h" 

#include "sequence_numbered_packed_status_types.h" 

#include "sequence_numbered_control_modes_types.h" 

#include "sequence_numbered_gyroscope_sample_types.h" 

#include "sequence_numbered_arming_status_types.h" 

#include "canDriverTypes.h" 

#include "towerUartDeps.h" 

#include "sequence_numbered_user_input_result_types.h" 

#include "sequence_numbered_camera_target_types.h" 

#include "sequence_numbered_px4io_state_types.h" 

#include "sequence_numbered_barometer_sample_types.h" 

#include "sequence_numbered_control_output_types.h" 


// AADL-defined types.
typedef uint8_t Data_Types__array_80_Unsigned_8_impl [80]; 

typedef 
      struct SMACCM_DATA__CanSenderData_i { 
         Data_Types__array_80_Unsigned_8_impl Input_fragment_req  ; 
         bool Input_fragment_complete  ; 
         bool Input_fragment_abort  ; 
         can_message Output_fragment_req  ; 
         can_message Output_fragment_complete_data  ; 
         bool Output_fragment_complete_bool  ; 
         bool Output_fragment_abort  ; 
      } SMACCM_DATA__CanSenderData_i ; 

typedef 
      struct smaccm_Input_periodic_dispatcher_struct { 
         uint32_t unused  ; 
      } smaccm_Input_periodic_dispatcher_struct ; 

typedef 
      struct SMACCM_DATA__ServerInputData_i { 
         sequence_numbered_reboot frame_0  ; 
         sequence_numbered_pid_config frame_1  ; 
         uint32_t frame_2  ; 
         sequence_numbered_pid_config frame_3  ; 
         uint32_t frame_4  ; 
         sequence_numbered_throttle_ui frame_5  ; 
         uint32_t frame_6  ; 
         sequence_numbered_stab_config frame_7  ; 
         uint32_t frame_8  ; 
         sequence_numbered_stab_config frame_9  ; 
         uint32_t frame_10  ; 
         sequence_numbered_pid_config frame_11  ; 
         uint32_t frame_12  ; 
         sequence_numbered_pid_config frame_13  ; 
         uint32_t frame_14  ; 
         sequence_numbered_tristate frame_15  ; 
         uint32_t frame_16  ; 
         sequence_numbered_control_modes frame_17  ; 
         uint32_t frame_18  ; 
         sequence_numbered_user_input frame_19  ; 
         uint32_t frame_20  ; 
         sequence_numbered_rgb_led_setting frame_21  ; 
         uint32_t frame_22  ; 
         uint32_t frame_23  ; 
         uint32_t frame_24  ; 
         uint32_t frame_25  ; 
         uint32_t frame_26  ; 
         uint32_t frame_27  ; 
         uint32_t frame_28  ; 
         uint32_t frame_29  ; 
         uint32_t frame_30  ; 
         uint32_t frame_31  ; 
         uint32_t frame_32  ; 
         uint32_t frame_33  ; 
         uint32_t frame_34  ; 
         uint32_t frame_35  ; 
         uint32_t frame_36  ; 
         uint32_t frame_37  ; 
         uint32_t frame_38  ; 
         uint32_t frame_39  ; 
         uint32_t frame_40  ; 
         uint32_t frame_41  ; 
         uint32_t frame_42  ; 
         uint32_t frame_43  ; 
         uint32_t frame_44  ; 
         uint32_t frame_45  ; 
         uint32_t frame_46  ; 
         uint32_t frame_47  ; 
         uint32_t frame_48  ; 
         uint32_t frame_49  ; 
         uint32_t frame_50  ; 
      } SMACCM_DATA__ServerInputData_i ; 

typedef 
      struct smaccm_PixhawkProxy_periodic_dispatcher_struct { 
         uint32_t unused  ; 
      } smaccm_PixhawkProxy_periodic_dispatcher_struct ; 

typedef 
      struct SMACCM_DATA__PixHawkData_i { 
         uint32_t Output_parse_frame_0  ; 
         uint32_t Output_parse_frame_1  ; 
         sequence_numbered_pid_config Output_parse_frame_2  ; 
         uint32_t Output_parse_frame_3  ; 
         sequence_numbered_pid_config Output_parse_frame_4  ; 
         uint32_t Output_parse_frame_5  ; 
         sequence_numbered_throttle_ui Output_parse_frame_6  ; 
         uint32_t Output_parse_frame_7  ; 
         sequence_numbered_stab_config Output_parse_frame_8  ; 
         uint32_t Output_parse_frame_9  ; 
         sequence_numbered_stab_config Output_parse_frame_10  ; 
         uint32_t Output_parse_frame_11  ; 
         sequence_numbered_pid_config Output_parse_frame_12  ; 
         uint32_t Output_parse_frame_13  ; 
         sequence_numbered_pid_config Output_parse_frame_14  ; 
         uint32_t Output_parse_frame_15  ; 
         sequence_numbered_tristate Output_parse_frame_16  ; 
         uint32_t Output_parse_frame_17  ; 
         sequence_numbered_control_modes Output_parse_frame_18  ; 
         uint32_t Output_parse_frame_19  ; 
         sequence_numbered_user_input Output_parse_frame_20  ; 
         uint32_t Output_parse_frame_21  ; 
         sequence_numbered_rgb_led_setting Output_parse_frame_22  ; 
         sequence_numbered_camera_target Output_parse_frame_23  ; 
         heartbeat Output_parse_frame_24  ; 
         sequence_numbered_packed_status Output_parse_frame_25  ; 
         sequence_numbered_control_law Output_parse_frame_26  ; 
         sequence_numbered_rc_input Output_parse_frame_27  ; 
         sequence_numbered_user_input_result Output_parse_frame_28  ; 
         sequence_numbered_sensors_result Output_parse_frame_29  ; 
         sequence_numbered_gyroscope_sample Output_parse_frame_30  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_31  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_32  ; 
         sequence_numbered_gyroscope_sample Output_parse_frame_33  ; 
         sequence_numbered_accelerometer_sample Output_parse_frame_34  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_35  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_36  ; 
         sequence_numbered_accelerometer_sample Output_parse_frame_37  ; 
         sequence_numbered_barometer_sample Output_parse_frame_38  ; 
         sequence_numbered_magnetometer_sample Output_parse_frame_39  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_40  ; 
         sequence_numbered_xyz_calibration Output_parse_frame_41  ; 
         sequence_numbered_magnetometer_sample Output_parse_frame_42  ; 
         sequence_numbered_position_sample Output_parse_frame_43  ; 
         sequence_numbered_control_setpoint Output_parse_frame_44  ; 
         sequence_numbered_control_output Output_parse_frame_45  ; 
         sequence_numbered_quadcopter_motors Output_parse_frame_46  ; 
         sequence_numbered_att_control_debug Output_parse_frame_47  ; 
         sequence_numbered_alt_control_debug Output_parse_frame_48  ; 
         sequence_numbered_px4io_state Output_parse_frame_49  ; 
         sequence_numbered_arming_status Output_parse_frame_50  ; 
         sequence_numbered_float Output_parse_frame_51  ; 
      } SMACCM_DATA__PixHawkData_i ; 

typedef 
      struct SMACCM_DATA__CameraData_i { 
         int32_t left  ; 
         int32_t right  ; 
         int32_t top  ; 
         int32_t bottom  ; 
      } SMACCM_DATA__CameraData_i ; 

typedef 
      struct SMACCM_DATA__ServerOutputData_i { 
         Data_Types__array_80_Unsigned_8_impl camera_data  ; 
         SMACCM_DATA__PixHawkData_i pixhawk_data  ; 
      } SMACCM_DATA__ServerOutputData_i ; 

typedef 
      struct smaccm_Data_Types__array_80_Unsigned_8_impl_container { 
         Data_Types__array_80_Unsigned_8_impl f  ; 
      } smaccm_Data_Types__array_80_Unsigned_8_impl_container ; 

/* endif for: #ifndef __SMACCM_top_i_Instance_types__H */
#endif

/**************************************************************************
  End of autogenerated file: smaccm_top_i_types.h
 **************************************************************************/

