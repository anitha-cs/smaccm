package MissionSoftware
public
	with SMACCM_SYS;
	with DATA_TYPES;
	with SMACCM_DATA;
	with MissionSubprograms;

system top
end top;

system implementation top.i
	subcomponents
		proc : process MissionSoftware.i;
	properties
		SMACCM_SYS::OS => CAmkES;
		SMACCM_SYS::HW => QEMU;
end top.i;
	
process MissionSoftware
end MissionSoftware;	

process implementation MissionSoftware.i
	subcomponents
		uart : thread UART;
		input : thread Input;
		server : thread Server;
		output : thread Output;
		pproxy : thread PixhawkProxy;
		can : thread CAN;
		vm : thread VM;
		
	connections
		uart_rx : subprogram group access uart.uart <-> input.uart;
		input_to_svr : subprogram group access input.to_svr <-> server.input;
		server_output : subprogram group access server.output <-> output.input;
		output_tx : subprogram group access output.uart <-> uart.uart;
		pixhawk_data : subprogram group access pproxy.pixhawk_data <-> server.pixhawk_data;
		proxy_to_can : subprogram group access pproxy.can <-> can.can;
		camera_data : subprogram group access vm.camera_data <-> server.camera_data;
		
end MissionSoftware.i;

thread UART
	features
		uart : provides subprogram group access MissionSubprograms::UART_group;
	properties
	    SMACCM_SYS::Is_External => true;
	    Dispatch_Protocol => Sporadic;
	    SMACCM_SYS::Thread_Type => Active;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Source_Text => ();
	    Period => 100ms;
end UART;
	
thread Input
	features
		--not sure what the dimension of this array should be
		uart : requires subprogram group access MissionSubprograms::UART_group;
		to_svr : requires subprogram group access MissionSubprograms::Server_Inputs;
	properties
		Dispatch_Protocol => Periodic;
		SMACCM_SYS::Thread_Type => Active;
		Priority => 1;
		Stack_Size => 1024 Bytes;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Period => 100ms;
	    Source_Text => ("usercode/input.c");
	    Compute_Entrypoint_Source_Text => "entry";
end Input;
	
thread Server
	features
		input : provides subprogram group access MissionSubprograms::Server_Inputs;
		output : requires subprogram group access MissionSubprograms::Server_Outputs;
		pixhawk_data : requires subprogram group access MissionSubprograms::Pixhawk_group;
		camera_data : requires subprogram group access MissionSubprograms::Camera_group;
	properties
		Dispatch_Protocol => Aperiodic;
		SMACCM_SYS::Thread_Type => Passive;
		Priority => 1;
		Stack_Size => 1024 Bytes;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Source_Text => ("usercode/server.c");
end Server;
	
thread Output
	features
		input : provides subprogram group access MissionSubprograms::Server_Outputs;
		uart : requires subprogram group access MissionSubprograms::UART_group;
	properties
		Dispatch_Protocol => Aperiodic;
		SMACCM_SYS::Thread_Type => Passive;
		Priority => 1;
		Stack_Size => 1024 Bytes;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Source_Text => ("usercode/output.c");
end Output;
	
thread PixhawkProxy
	features
		pixhawk_data : provides subprogram group access MissionSubprograms::Pixhawk_group;
		can : requires subprogram group access MissionSubprograms::CAN_group;
	properties
		Dispatch_Protocol => Periodic;
		SMACCM_SYS::Thread_Type => Active;
		Priority => 1;
		Stack_Size => 1024 Bytes;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Period => 100ms;
	    Source_Text => ("usercode/pixhawk_proxy.c");
	    Compute_Entrypoint_Source_Text => "entry";
end PixhawkProxy;
	
thread CAN
	features
		can : provides subprogram group access MissionSubprograms::CAN_group;
--		data_out : out event data port;
--		data_in : in event data port;
	properties
	    SMACCM_SYS::Is_External => true;
	    Dispatch_Protocol => Sporadic;
	    SMACCM_SYS::Thread_Type => Active;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Source_Text => ();
end CAN;

thread VM
	features
		camera_data : provides subprogram group access MissionSubprograms::Camera_group;
	properties
		SMACCM_SYS::Is_External => true;
	    Dispatch_Protocol => Sporadic;
	    SMACCM_SYS::Thread_Type => Active;
	    Compute_Execution_Time => 10 us .. 100 us;
	    Source_Text => ();
end VM;
	
end MissionSoftware;